
-- module Grammar where

-- import Prelude

-- import Data.Tuple (Tuple)
-- import Data.List (List)
-- import Data.Maybe (Maybe)
-- import Data.Generic

-- data Expression
--   = EID String
--   | ELitNum String
--   | ElitStr String
--   | ELitReg String
--   | ELitRaw String
--   | Arr (Array Expression)
--   | EObj (Array (Tuple String Expression))
--   | Estat (Array Statement)
--   | ELam String Expression
--   | EApp Expression Expression
--   | ELetIn (Tuple String Expression) Expression
--   | EIfElse Expression Expression Expression
--   | ECaseOf Expression (Array (Tuple Expression Expression))
--   | EWithDo String (Array DoStatement)
--   | Typed Type Expression

-- data Type
--   = TypeNum
--   | TypeBool
--   | TypeReg
--   | TypeStr
--   | TypeArr
--   | TypeRec
--   | TypeFunc Type Type
--   | TypeClass String
--   | TypeUnkown

-- data DoStatement
--   = DoStatLet (Tuple String Expression)
--   | DoStatAssign (Tuple String Expression)
--   | DoStatCall Expression

-- data Statement
--   = StatLet (Tuple String Expression)
--   | StatAss (Tuple String Expression)
--   | StatCall Expression
--   | StatReturn Expression
--   | StatIfElse Expression (Array Statement) (Array Statement)
--   | StatWhile Expression (Array Statement)
--   | StatBreak
--   | StatContinue
--   | StatSwitch Expression (Array (Tuple Expression (Array Statement)))
--   | StatPass

-- data ModuleStatement
--   = MBind (Tuple String Expression)
--   | MImport String (Array String)
--   | MImportAs String String
--   | MExport (Array String)
--   | MOpDefine OpType Int String String
--   | MClassDefine String String (Tuple String Expression)

-- data OpType
--   = OpInfixR
--   | OpInfixL
--   | OpPrefix
--   | OpPostFix


-- newtype Module
--   = Module { exports:: Array String
--            , imports:: Array (Tuple (Tuple String (Maybe String)) (Array String))
--            , optable:: Array (Tuple (Tuple OpType Int) (Tuple String String))
--            , bindings:: Array (Tuple String Expression) }

-- newtype Program = Program (Array (Tuple String Module))

-- derive instance genericExpression :: Generic Expression
-- derive instance genericDoStatement ::Generic  DoStatement
-- derive instance genericStatement :: Generic Statement
-- derive instance genericModuleStatement :: Generic ModuleStatement
-- derive instance genericOpType :: Generic OpType
-- derive instance genericType :: Generic Type
-- derive instance genericModule :: Generic Module
-- derive instance genericProgram :: Generic Program

-- instance showExpression :: Show Expression where show = gShow
-- instance showDoStatement :: Show DoStatement where show = gShow
-- instance showStatement :: Show Statement where show = gShow
-- instance showModuleStatement :: Show ModuleStatement where show = gShow
-- instance showOpType :: Show OpType where show = gShow
-- instance showType :: Show Type where show = gShow
-- instance showModule :: Show Module where show = gShow
-- instance showProgram :: Show Program where show = gShow
