#!/usr/bin/env node
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	

	var fs = __webpack_require__(1);
	var path = __webpack_require__(2);
	var Smooth = __webpack_require__(3);
	var source_path = process.argv[2];
	var target_path = process.argv[3];

	if (!source_path){
	    console.log('Usage: smooth <source_path> <target_path>');
	} else {
	    var source = fs.readFileSync(path.normalize(source_path), 'utf8');
	    var target_path = target_path || path.basename(source_path, '.sm')+'.js';
	    fs.writeFileSync(target_path, Smooth.parse(source), 'utf8');
	};


/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = require("fs");

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = require("path");

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require){
	var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,8],$V2=[1,6],$V3=[1,14],$V4=[1,17],$V5=[5,8,11,15],$V6=[1,22],$V7=[1,37],$V8=[1,31],$V9=[1,32],$Va=[1,34],$Vb=[1,26],$Vc=[1,27],$Vd=[1,28],$Ve=[1,29],$Vf=[1,30],$Vg=[1,33],$Vh=[1,36],$Vi=[1,38],$Vj=[1,39],$Vk=[1,40],$Vl=[1,41],$Vm=[1,42],$Vn=[1,44],$Vo=[11,19,27],$Vp=[1,48],$Vq=[14,17],$Vr=[7,21,32],$Vs=[1,51],$Vt=[1,52],$Vu=[1,53],$Vv=[1,54],$Vw=[1,55],$Vx=[1,56],$Vy=[1,57],$Vz=[1,58],$VA=[1,59],$VB=[1,60],$VC=[1,61],$VD=[1,62],$VE=[1,63],$VF=[1,64],$VG=[1,65],$VH=[1,66],$VI=[1,67],$VJ=[1,68],$VK=[1,69],$VL=[1,70],$VM=[7,14,17,21,24,29,30,32,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,63,66],$VN=[7,9,11,12,14,17,21,22,24,26,28,29,30,31,32,33,34,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,63,64,66,68,69,70,71,72,73],$VO=[2,53],$VP=[17,66],$VQ=[17,24],$VR=[7,9,11,12,14,17,21,22,24,26,28,29,30,31,32,33,34,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,63,64,66,68,69,70,71,72,73],$VS=[1,110],$VT=[11,24],$VU=[7,14,17,21,24,29,30,32,34,66],$VV=[7,14,17,21,24,29,30,32,34,38,39,40,66],$VW=[7,14,17,21,24,29,30,32,34,38,39,40,41,42,66],$VX=[7,14,17,21,24,29,30,32,34,38,39,40,41,42,43,44,45,46,66],$VY=[7,14,17,21,24,29,30,32,34,38,39,40,41,42,43,44,45,46,47,48,66],$VZ=[7,14,17,21,24,29,30,32,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,66],$V_=[7,14,17,21,24,29,30,32,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,66],$V$=[7,14,17,21,24,29,30,32,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,66],$V01=[1,127],$V11=[1,126],$V21=[1,136],$V31=[9,11,12,22,24,26,28,31,33,36,64,68,69,70,71,72,73],$V41=[9,24,62,68,69,70,71,72,73];
	var parser = {trace: function trace() { },
	yy: {},
	symbols_: {"error":2,"module":3,"module_stat_list":4,"EOF":5,"module_stat":6,";":7,"import":8,"STRING":9,"as":10,"NAME":11,"(":12,"name_list":13,")":14,"export":15,"binding":16,",":17,"argument_list":18,"=":19,"expr":20,"where":21,"{":22,"binding_list":23,"}":24,"atom":25,"\\":26,"->":27,"if":28,"than":29,"else":30,"let":31,"in":32,"case":33,"of":34,"case_of_list":35,"@":36,"do_stat_list":37,"$":38,"||":39,"&&":40,"==":41,"!=":42,">":43,"<":44,">=":45,"<=":46,"+":47,"-":48,"*":49,"/":50,"%":51,"**":52,"<<<":53,">>>":54,"<&":55,"&>":56,"do_stat":57,"<-":58,"case_of":59,"literal":60,":":61,"default":62,".":63,"[":64,"array_items":65,"]":66,"object_items":67,"NUMBER":68,"BOOLEAN":69,"NULL":70,"UNDEFINED":71,"RAWCODE":72,"REGEXP":73,"$accept":0,"$end":1},
	terminals_: {2:"error",5:"EOF",7:";",8:"import",9:"STRING",10:"as",11:"NAME",12:"(",14:")",15:"export",17:",",19:"=",21:"where",22:"{",24:"}",26:"\\",27:"->",28:"if",29:"than",30:"else",31:"let",32:"in",33:"case",34:"of",36:"@",38:"$",39:"||",40:"&&",41:"==",42:"!=",43:">",44:"<",45:">=",46:"<=",47:"+",48:"-",49:"*",50:"/",51:"%",52:"**",53:"<<<",54:">>>",55:"<&",56:"&>",58:"<-",61:":",62:"default",63:".",64:"[",66:"]",68:"NUMBER",69:"BOOLEAN",70:"NULL",71:"UNDEFINED",72:"RAWCODE",73:"REGEXP"},
	productions_: [0,[3,2],[3,1],[4,3],[4,2],[6,4],[6,5],[6,4],[6,1],[13,3],[13,1],[18,2],[18,1],[16,3],[16,4],[16,5],[23,3],[23,2],[20,1],[20,4],[20,6],[20,4],[20,6],[20,5],[20,2],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[37,3],[37,2],[57,2],[57,3],[57,1],[35,3],[35,2],[59,3],[59,3],[25,1],[25,3],[25,3],[25,3],[25,3],[25,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[65,3],[65,1],[65,0],[67,5],[67,3],[67,0]],
	performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
	/* this == yyval */

	var $0 = $$.length - 1;
	switch (yystate) {
	case 1:

	      var module = AST.Module(
	         $$[$0-1].filter(function(s){
	           return (s instanceof AST.Module.Import || s instanceof AST.Module.ImportAs)
	         }),
	         $$[$0-1].filter(function(s){
	           return (s instanceof AST.Module.Export)
	         }),
	         $$[$0-1].filter(function(s){
	           return (s instanceof AST.Module.Binding)
	         }));
	      return compile(module);
	    
	break;
	case 2:
	 return '' 
	break;
	case 3:
	 this.$ = $$[$0-2].concat([$$[$0-1]]) 
	break;
	case 4: case 17: case 45: case 50:
	 this.$ = [$$[$0-1]] 
	break;
	case 5:
	 this.$ = AST.Module.ImportAs($$[$0-2], $$[$0]) 
	break;
	case 6:
	 this.$ = AST.Module.Import($$[$0-3], $$[$0-1]) 
	break;
	case 7:
	 this.$ = AST.Module.Export($$[$0-1]) 
	break;
	case 8:
	 this.$ = AST.Module.Binding($$[$0]) 
	break;
	case 9: case 66:
	 this.$ = $$[$0-2].concat($$[$0]) 
	break;
	case 10: case 12: case 67:
	 this.$ = [$$[$0]] 
	break;
	case 11:
	 this.$ = $$[$0-1].concat($$[$0]) 
	break;
	case 13:
	 this.$ = AST.Binding($$[$0-2], $$[$0]) 
	break;
	case 14:
	 this.$ = AST.Binding($$[$0-3], $$[$0-2].reduceRight(function(expr, arg){
	         return AST.Expr.Lam(arg, expr)}, $$[$0])) 
	break;
	case 15:
	 this.$ = AST.Binding($.name, AST.Expr.LetIn($$[$0-1], $expr)) 
	break;
	case 16: case 44: case 49:
	 this.$ = $$[$0-2].concat($$[$0-1]) 
	break;
	case 18: case 58:
	 this.$ = $$[$0] 
	break;
	case 19:
	 this.$ = $$[$0-2].reduceRight(function(expr, arg){
	         return AST.Expr.Lam(arg, expr)}, $$[$0]) 
	break;
	case 20:
	 this.$ = AST.Expr.IfElse($$[$0-4], $$[$0-2], $$[$0]) 
	break;
	case 21:
	 this.$ = AST.Expr.LetIn([$$[$0-2]], $$[$0]) 
	break;
	case 22:
	 this.$ = AST.Expr.CaseOf($$[$0-4], $$[$0-2]) 
	break;
	case 23:

	      var last = $$[$0-1].slice(-1)[0];
	      var init = $$[$0-1].slice(0,-1);

	      if ( last.type !== 'call' ){
	         parser.parseError('Parse error on line ' + (yylineno + 1) + ': The last statement in do block must be an expression' ,{});
	      } else {

	        if (init.length > 0){
	          this.$ = init.reduceRight(function(expr, dostat){
	            switch (dostat.type){
	              case 'let':
	                return AST.Expr.LetIn([dostat.binding], expr)
	              case 'ass':
	                return AST.Expr.App(
	                      AST.Expr.App(AST.Expr.ID($$[$0-3]), dostat.expr),
	                      AST.Expr.Lam(dostat.name, expr))
	              case 'call':
	                return AST.Expr.App(
	                      AST.Expr.App(AST.Expr.ID($$[$0-3]), dostat.expr),
	                      AST.Expr.Lam('_', expr))
	            };
	          }, AST.Expr.App(
	            AST.Expr.App(AST.Expr.ID($$[$0-3]), last.expr)
	            , AST.Expr.ID('NEXT$')));
	          this.$ = AST.Expr.Lam('NEXT$', this.$);
	        } else {
	          this.$ = last.expr;
	        };
	      };
	    
	break;
	case 24:
	 this.$ = AST.Expr.App($$[$0-1], $$[$0]) 
	break;
	case 25:
	 this.$ = AST.Expr.App($$[$0-2], $$[$0]) 
	break;
	case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41:
	 this.$ = AST.Expr.Op($$[$0-1], $$[$0-2], $$[$0]) 
	break;
	case 42:

	      if ( $$[$0] instanceof AST.Expr.Array ){
	         this.$ = AST.Expr.Call($$[$0-2], $$[$0]);
	      }else{
	         parser.parseError('Parse error on line ' + (yylineno + 1) + ': The left expr of op "<&" must be an array!' ,{});
	      };
	    
	break;
	case 43:

	      if ( $$[$0-2] instanceof AST.Expr.Array ){
	         this.$ = AST.Expr.Call($$[$0], $$[$0-2]);
	      }else{
	         parser.parseError('Parse error on line ' + (yylineno + 1) + ': The right expr of op "<&" must be an array!' ,{});
	      };
	    
	break;
	case 46:
	 this.$ = {type:'let', binding:$$[$0]} 
	break;
	case 47:
	 this.$ = {type:'ass', name:$$[$0-2], expr:$$[$0]} 
	break;
	case 48:
	 this.$ = {type:'call', expr:$$[$0]} 
	break;
	case 51:
	 this.$ = AST.Expr.CaseOf.Case($$[$0-2], $$[$0]) 
	break;
	case 52:
	 this.$ = AST.Expr.CaseOf.Case(AST.Expr.Val('DEFAULT', 'default'), $$[$0]) 
	break;
	case 53:
	 this.$ = AST.Expr.ID($$[$0]) 
	break;
	case 54:
	 this.$ = AST.Expr.Attr($$[$0-2], $$[$0]) 
	break;
	case 55:
	 this.$ = $$[$0-1] 
	break;
	case 56:
	 this.$ = AST.Expr.Array($$[$0-1]) 
	break;
	case 57:
	 this.$ = AST.Expr.Object($$[$0-1]) 
	break;
	case 59:
	 this.$ = AST.Expr.Val('NUMBER', $$[$0])
	break;
	case 60:
	 this.$ = AST.Expr.Val('STRING', $$[$0])
	break;
	case 61:
	 this.$ = AST.Expr.Val('BOOLEAN', $$[$0])
	break;
	case 62:
	 this.$ = AST.Expr.Val('NULL', $$[$0])
	break;
	case 63:
	 this.$ = AST.Expr.Val('UNDEFINED', $$[$0])
	break;
	case 64:
	 this.$ = AST.Expr.Val('RAWCODE', $$[$0])
	break;
	case 65:
	 this.$ = AST.Expr.Val('REGEXP', $$[$0])
	break;
	case 69:
	 this.$ = $$[$0-4].concat([Expr.Object.KeyValue($$[$0-2], $$[$0])]) 
	break;
	case 70:
	 this.$ = [Expr.Object.KeyValue($$[$0-2], $$[$0])] 
	break;
	}
	},
	table: [{3:1,4:2,5:[1,3],6:4,8:$V0,11:$V1,15:$V2,16:7},{1:[3]},{5:[1,9],6:10,8:$V0,11:$V1,15:$V2,16:7},{1:[2,2]},{7:[1,11]},{9:[1,12]},{12:[1,13]},{7:[2,8],21:$V3},{11:$V4,18:16,19:[1,15]},{1:[2,1]},{7:[1,18]},o($V5,[2,4]),{10:[1,19],12:[1,20]},{11:$V6,13:21},{22:[1,23]},{9:$V7,11:$V8,12:$V9,20:24,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{11:$Vn,19:[1,43]},o($Vo,[2,12]),o($V5,[2,3]),{11:[1,45]},{11:$V6,13:46},{14:[1,47],17:$Vp},o($Vq,[2,10]),{11:$V1,16:50,23:49},o($Vr,[2,13],{38:$Vs,39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL}),o($VM,[2,18],{25:25,60:35,20:71,9:$V7,11:$V8,12:$V9,22:$Va,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm}),{11:$V4,18:72},{9:$V7,11:$V8,12:$V9,20:73,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{11:$V1,16:74},{9:$V7,11:$V8,12:$V9,20:75,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{11:[1,76]},o($VN,$VO),{9:$V7,11:$V8,12:$V9,20:77,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},o($VP,[2,68],{25:25,60:35,65:78,20:79,9:$V7,11:$V8,12:$V9,22:$Va,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm}),o($VQ,[2,71],{67:80,11:[1,81]}),o($VN,[2,58]),o($VR,[2,59]),o($VR,[2,60]),o($VR,[2,61]),o($VR,[2,62]),o($VR,[2,63]),o($VR,[2,64]),o($VR,[2,65]),{9:$V7,11:$V8,12:$V9,20:82,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},o($Vo,[2,11]),{7:[2,5]},{14:[1,83],17:$Vp},{7:[2,7]},{11:[1,84]},{11:$V1,16:86,24:[1,85]},{7:[1,87],21:$V3},{9:$V7,11:$V8,12:$V9,20:88,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$V7,11:$V8,12:$V9,20:89,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$V7,11:$V8,12:$V9,20:90,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$V7,11:$V8,12:$V9,20:91,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$V7,11:$V8,12:$V9,20:92,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$V7,11:$V8,12:$V9,20:93,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$V7,11:$V8,12:$V9,20:94,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$V7,11:$V8,12:$V9,20:95,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$V7,11:$V8,12:$V9,20:96,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$V7,11:$V8,12:$V9,20:97,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$V7,11:$V8,12:$V9,20:98,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$V7,11:$V8,12:$V9,20:99,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$V7,11:$V8,12:$V9,20:100,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$V7,11:$V8,12:$V9,20:101,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$V7,11:$V8,12:$V9,20:102,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$V7,11:$V8,12:$V9,20:103,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$V7,11:$V8,12:$V9,20:104,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$V7,11:$V8,12:$V9,20:105,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$V7,11:$V8,12:$V9,20:106,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{11:[1,107]},o($VM,[2,24]),{11:$Vn,27:[1,108]},{29:[1,109],38:$Vs,39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL},{21:$V3,32:$VS},{34:[1,111],38:$Vs,39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL},{22:[1,112]},{14:[1,113],38:$Vs,39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL},{17:[1,115],66:[1,114]},o($VP,[2,67],{38:$Vs,39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL}),{17:[1,117],24:[1,116]},{61:[1,118]},o($Vr,[2,14],{38:$Vs,39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL}),{7:[2,6]},o($Vq,[2,9]),o($Vr,[2,15]),{7:[1,119],21:$V3},o($VT,[2,17]),o($VU,[2,25],{38:$Vs,39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL}),o($VV,[2,26],{41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL}),o($VV,[2,27],{41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL}),o($VW,[2,28],{43:$Vx,44:$Vy,45:$Vz,46:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL}),o($VW,[2,29],{43:$Vx,44:$Vy,45:$Vz,46:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL}),o($VX,[2,30],{47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL}),o($VX,[2,31],{47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL}),o($VX,[2,32],{47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL}),o($VX,[2,33],{47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL}),o($VY,[2,34],{49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL}),o($VY,[2,35],{49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL}),o($VZ,[2,36],{53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL}),o($VZ,[2,37],{53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL}),o($VZ,[2,38],{53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL}),o($VZ,[2,39],{53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL}),o($V_,[2,40],{55:$VJ,56:$VK,63:$VL}),o($V_,[2,41],{55:$VJ,56:$VK,63:$VL}),o($V$,[2,42],{63:$VL}),o($V$,[2,43],{63:$VL}),o($VN,[2,54]),{9:$V7,11:$V8,12:$V9,20:120,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$V7,11:$V8,12:$V9,20:121,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$V7,11:$V8,12:$V9,20:122,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{22:[1,123]},{9:$V7,11:$V01,12:$V9,20:128,22:$Va,25:25,26:$Vb,28:$Vc,31:$V11,33:$Ve,36:$Vf,37:124,57:125,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},o($VN,[2,55]),o($VN,[2,56]),{9:$V7,11:$V8,12:$V9,20:129,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},o($VN,[2,57]),{11:[1,130]},{9:$V7,11:$V8,12:$V9,20:131,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},o($VT,[2,16]),o($VU,[2,19],{38:$Vs,39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL}),{30:[1,132],38:$Vs,39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL},o($VU,[2,21],{38:$Vs,39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL}),{9:$V7,35:133,59:134,60:135,62:$V21,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$V7,11:$V01,12:$V9,20:128,22:$Va,24:[1,137],25:25,26:$Vb,28:$Vc,31:$V11,33:$Ve,36:$Vf,57:138,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{7:[1,139]},{11:$V1,16:140},o([7,9,11,12,22,26,28,31,33,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,63,64,68,69,70,71,72,73],$VO,{58:[1,141]}),{7:[2,48],38:$Vs,39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL},o($VP,[2,66],{38:$Vs,39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL}),{61:[1,142]},o($VQ,[2,70],{38:$Vs,39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL}),{9:$V7,11:$V8,12:$V9,20:143,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$V7,24:[1,144],59:145,60:135,62:$V21,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{7:[1,146]},{61:[1,147]},{61:[1,148]},o($VM,[2,23]),{7:[1,149]},o($V31,[2,45]),{7:[2,46],21:$V3,32:$VS},{9:$V7,11:$V8,12:$V9,20:150,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$V7,11:$V8,12:$V9,20:151,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},o($VU,[2,20],{38:$Vs,39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL}),o($VM,[2,22]),{7:[1,152]},o($V41,[2,50]),{9:$V7,11:$V8,12:$V9,20:153,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$V7,11:$V8,12:$V9,20:154,22:$Va,25:25,26:$Vb,28:$Vc,31:$Vd,33:$Ve,36:$Vf,60:35,64:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},o($V31,[2,44]),{7:[2,47],38:$Vs,39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL},o($VQ,[2,69],{38:$Vs,39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL}),o($V41,[2,49]),{7:[2,51],38:$Vs,39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL},{7:[2,52],38:$Vs,39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,63:$VL}],
	defaultActions: {3:[2,2],9:[2,1],45:[2,5],47:[2,7],83:[2,6]},
	parseError: function parseError(str, hash) {
	    if (hash.recoverable) {
	        this.trace(str);
	    } else {
	        function _parseError (msg, hash) {
	            this.message = msg;
	            this.hash = hash;
	        }
	        _parseError.prototype = Error;

	        throw new _parseError(str, hash);
	    }
	},
	parse: function parse(input) {
	    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
	    var args = lstack.slice.call(arguments, 1);
	    var lexer = Object.create(this.lexer);
	    var sharedState = { yy: {} };
	    for (var k in this.yy) {
	        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
	            sharedState.yy[k] = this.yy[k];
	        }
	    }
	    lexer.setInput(input, sharedState.yy);
	    sharedState.yy.lexer = lexer;
	    sharedState.yy.parser = this;
	    if (typeof lexer.yylloc == 'undefined') {
	        lexer.yylloc = {};
	    }
	    var yyloc = lexer.yylloc;
	    lstack.push(yyloc);
	    var ranges = lexer.options && lexer.options.ranges;
	    if (typeof sharedState.yy.parseError === 'function') {
	        this.parseError = sharedState.yy.parseError;
	    } else {
	        this.parseError = Object.getPrototypeOf(this).parseError;
	    }
	    function popStack(n) {
	        stack.length = stack.length - 2 * n;
	        vstack.length = vstack.length - n;
	        lstack.length = lstack.length - n;
	    }
	    _token_stack:
	        var lex = function () {
	            var token;
	            token = lexer.lex() || EOF;
	            if (typeof token !== 'number') {
	                token = self.symbols_[token] || token;
	            }
	            return token;
	        };
	    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
	    while (true) {
	        state = stack[stack.length - 1];
	        if (this.defaultActions[state]) {
	            action = this.defaultActions[state];
	        } else {
	            if (symbol === null || typeof symbol == 'undefined') {
	                symbol = lex();
	            }
	            action = table[state] && table[state][symbol];
	        }
	                    if (typeof action === 'undefined' || !action.length || !action[0]) {
	                var errStr = '';
	                expected = [];
	                for (p in table[state]) {
	                    if (this.terminals_[p] && p > TERROR) {
	                        expected.push('\'' + this.terminals_[p] + '\'');
	                    }
	                }
	                if (lexer.showPosition) {
	                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
	                } else {
	                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
	                }
	                this.parseError(errStr, {
	                    text: lexer.match,
	                    token: this.terminals_[symbol] || symbol,
	                    line: lexer.yylineno,
	                    loc: yyloc,
	                    expected: expected
	                });
	            }
	        if (action[0] instanceof Array && action.length > 1) {
	            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
	        }
	        switch (action[0]) {
	        case 1:
	            stack.push(symbol);
	            vstack.push(lexer.yytext);
	            lstack.push(lexer.yylloc);
	            stack.push(action[1]);
	            symbol = null;
	            if (!preErrorSymbol) {
	                yyleng = lexer.yyleng;
	                yytext = lexer.yytext;
	                yylineno = lexer.yylineno;
	                yyloc = lexer.yylloc;
	                if (recovering > 0) {
	                    recovering--;
	                }
	            } else {
	                symbol = preErrorSymbol;
	                preErrorSymbol = null;
	            }
	            break;
	        case 2:
	            len = this.productions_[action[1]][1];
	            yyval.$ = vstack[vstack.length - len];
	            yyval._$ = {
	                first_line: lstack[lstack.length - (len || 1)].first_line,
	                last_line: lstack[lstack.length - 1].last_line,
	                first_column: lstack[lstack.length - (len || 1)].first_column,
	                last_column: lstack[lstack.length - 1].last_column
	            };
	            if (ranges) {
	                yyval._$.range = [
	                    lstack[lstack.length - (len || 1)].range[0],
	                    lstack[lstack.length - 1].range[1]
	                ];
	            }
	            r = this.performAction.apply(yyval, [
	                yytext,
	                yyleng,
	                yylineno,
	                sharedState.yy,
	                action[1],
	                vstack,
	                lstack
	            ].concat(args));
	            if (typeof r !== 'undefined') {
	                return r;
	            }
	            if (len) {
	                stack = stack.slice(0, -1 * len * 2);
	                vstack = vstack.slice(0, -1 * len);
	                lstack = lstack.slice(0, -1 * len);
	            }
	            stack.push(this.productions_[action[1]][0]);
	            vstack.push(yyval.$);
	            lstack.push(yyval._$);
	            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
	            stack.push(newState);
	            break;
	        case 3:
	            return true;
	        }
	    }
	    return true;
	}};

	    var AST = __webpack_require__(4);
	    var compile = __webpack_require__(5);

	/* generated by jison-lex 0.3.4 */
	var lexer = (function(){
	var lexer = ({

	EOF:1,

	parseError:function parseError(str, hash) {
	        if (this.yy.parser) {
	            this.yy.parser.parseError(str, hash);
	        } else {
	            throw new Error(str);
	        }
	    },

	// resets the lexer, sets new input
	setInput:function (input, yy) {
	        this.yy = yy || this.yy || {};
	        this._input = input;
	        this._more = this._backtrack = this.done = false;
	        this.yylineno = this.yyleng = 0;
	        this.yytext = this.matched = this.match = '';
	        this.conditionStack = ['INITIAL'];
	        this.yylloc = {
	            first_line: 1,
	            first_column: 0,
	            last_line: 1,
	            last_column: 0
	        };
	        if (this.options.ranges) {
	            this.yylloc.range = [0,0];
	        }
	        this.offset = 0;
	        return this;
	    },

	// consumes and returns one char from the input
	input:function () {
	        var ch = this._input[0];
	        this.yytext += ch;
	        this.yyleng++;
	        this.offset++;
	        this.match += ch;
	        this.matched += ch;
	        var lines = ch.match(/(?:\r\n?|\n).*/g);
	        if (lines) {
	            this.yylineno++;
	            this.yylloc.last_line++;
	        } else {
	            this.yylloc.last_column++;
	        }
	        if (this.options.ranges) {
	            this.yylloc.range[1]++;
	        }

	        this._input = this._input.slice(1);
	        return ch;
	    },

	// unshifts one char (or a string) into the input
	unput:function (ch) {
	        var len = ch.length;
	        var lines = ch.split(/(?:\r\n?|\n)/g);

	        this._input = ch + this._input;
	        this.yytext = this.yytext.substr(0, this.yytext.length - len);
	        //this.yyleng -= len;
	        this.offset -= len;
	        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
	        this.match = this.match.substr(0, this.match.length - 1);
	        this.matched = this.matched.substr(0, this.matched.length - 1);

	        if (lines.length - 1) {
	            this.yylineno -= lines.length - 1;
	        }
	        var r = this.yylloc.range;

	        this.yylloc = {
	            first_line: this.yylloc.first_line,
	            last_line: this.yylineno + 1,
	            first_column: this.yylloc.first_column,
	            last_column: lines ?
	                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
	                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
	              this.yylloc.first_column - len
	        };

	        if (this.options.ranges) {
	            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
	        }
	        this.yyleng = this.yytext.length;
	        return this;
	    },

	// When called from action, caches matched text and appends it on next action
	more:function () {
	        this._more = true;
	        return this;
	    },

	// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
	reject:function () {
	        if (this.options.backtrack_lexer) {
	            this._backtrack = true;
	        } else {
	            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
	                text: "",
	                token: null,
	                line: this.yylineno
	            });

	        }
	        return this;
	    },

	// retain first n characters of the match
	less:function (n) {
	        this.unput(this.match.slice(n));
	    },

	// displays already matched input, i.e. for error messages
	pastInput:function () {
	        var past = this.matched.substr(0, this.matched.length - this.match.length);
	        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
	    },

	// displays upcoming input, i.e. for error messages
	upcomingInput:function () {
	        var next = this.match;
	        if (next.length < 20) {
	            next += this._input.substr(0, 20-next.length);
	        }
	        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
	    },

	// displays the character position where the lexing error occurred, i.e. for error messages
	showPosition:function () {
	        var pre = this.pastInput();
	        var c = new Array(pre.length + 1).join("-");
	        return pre + this.upcomingInput() + "\n" + c + "^";
	    },

	// test the lexed token: return FALSE when not a match, otherwise return token
	test_match:function (match, indexed_rule) {
	        var token,
	            lines,
	            backup;

	        if (this.options.backtrack_lexer) {
	            // save context
	            backup = {
	                yylineno: this.yylineno,
	                yylloc: {
	                    first_line: this.yylloc.first_line,
	                    last_line: this.last_line,
	                    first_column: this.yylloc.first_column,
	                    last_column: this.yylloc.last_column
	                },
	                yytext: this.yytext,
	                match: this.match,
	                matches: this.matches,
	                matched: this.matched,
	                yyleng: this.yyleng,
	                offset: this.offset,
	                _more: this._more,
	                _input: this._input,
	                yy: this.yy,
	                conditionStack: this.conditionStack.slice(0),
	                done: this.done
	            };
	            if (this.options.ranges) {
	                backup.yylloc.range = this.yylloc.range.slice(0);
	            }
	        }

	        lines = match[0].match(/(?:\r\n?|\n).*/g);
	        if (lines) {
	            this.yylineno += lines.length;
	        }
	        this.yylloc = {
	            first_line: this.yylloc.last_line,
	            last_line: this.yylineno + 1,
	            first_column: this.yylloc.last_column,
	            last_column: lines ?
	                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
	                         this.yylloc.last_column + match[0].length
	        };
	        this.yytext += match[0];
	        this.match += match[0];
	        this.matches = match;
	        this.yyleng = this.yytext.length;
	        if (this.options.ranges) {
	            this.yylloc.range = [this.offset, this.offset += this.yyleng];
	        }
	        this._more = false;
	        this._backtrack = false;
	        this._input = this._input.slice(match[0].length);
	        this.matched += match[0];
	        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
	        if (this.done && this._input) {
	            this.done = false;
	        }
	        if (token) {
	            return token;
	        } else if (this._backtrack) {
	            // recover context
	            for (var k in backup) {
	                this[k] = backup[k];
	            }
	            return false; // rule action called reject() implying the next rule should be tested instead.
	        }
	        return false;
	    },

	// return next match in input
	next:function () {
	        if (this.done) {
	            return this.EOF;
	        }
	        if (!this._input) {
	            this.done = true;
	        }

	        var token,
	            match,
	            tempMatch,
	            index;
	        if (!this._more) {
	            this.yytext = '';
	            this.match = '';
	        }
	        var rules = this._currentRules();
	        for (var i = 0; i < rules.length; i++) {
	            tempMatch = this._input.match(this.rules[rules[i]]);
	            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
	                match = tempMatch;
	                index = i;
	                if (this.options.backtrack_lexer) {
	                    token = this.test_match(tempMatch, rules[i]);
	                    if (token !== false) {
	                        return token;
	                    } else if (this._backtrack) {
	                        match = false;
	                        continue; // rule action called reject() implying a rule MISmatch.
	                    } else {
	                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
	                        return false;
	                    }
	                } else if (!this.options.flex) {
	                    break;
	                }
	            }
	        }
	        if (match) {
	            token = this.test_match(match, rules[index]);
	            if (token !== false) {
	                return token;
	            }
	            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
	            return false;
	        }
	        if (this._input === "") {
	            return this.EOF;
	        } else {
	            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
	                text: "",
	                token: null,
	                line: this.yylineno
	            });
	        }
	    },

	// return next match that has a token
	lex:function lex() {
	        var r = this.next();
	        if (r) {
	            return r;
	        } else {
	            return this.lex();
	        }
	    },

	// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
	begin:function begin(condition) {
	        this.conditionStack.push(condition);
	    },

	// pop the previously active lexer condition state off the condition stack
	popState:function popState() {
	        var n = this.conditionStack.length - 1;
	        if (n > 0) {
	            return this.conditionStack.pop();
	        } else {
	            return this.conditionStack[0];
	        }
	    },

	// produce the lexer rule set which is active for the currently active lexer condition state
	_currentRules:function _currentRules() {
	        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
	            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
	        } else {
	            return this.conditions["INITIAL"].rules;
	        }
	    },

	// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
	topState:function topState(n) {
	        n = this.conditionStack.length - 1 - Math.abs(n || 0);
	        if (n >= 0) {
	            return this.conditionStack[n];
	        } else {
	            return "INITIAL";
	        }
	    },

	// alias for begin(condition)
	pushState:function pushState(condition) {
	        this.begin(condition);
	    },

	// return the number of states currently on the stack
	stateStackSize:function stateStackSize() {
	        return this.conditionStack.length;
	    },
	options: {},
	performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
	var YYSTATE=YY_START;
	switch($avoiding_name_collisions) {
	case 0:return 5
	break;
	case 1:/** skip **/
	break;
	case 2:/** skip **/
	break;
	case 3: return yy_.yytext 
	break;
	case 4:return 68
	break;
	case 5:  
	                                            // parseInt to convert to base-10
	                                            var i = yy_.yytext.substr(2); // binary val
	                                            yy_.yytext = parseInt(i,2).toString();
	                                            return 68
	                                        
	break;
	case 6:return 68
	break;
	case 7:return 69
	break;
	case 8:return 70
	break;
	case 9:return 71
	break;
	case 10:return 9
	break;
	case 11:return 73
	break;
	case 12:
	                                          var str = yy_.yytext
	                                              .substr(1, yy_.yytext.length-2)
	                                          yy_.yytext = str
	                                          return 72
	                                        
	break;
	case 13:return 11
	break;
	}
	},
	rules: [/^(?:$)/,/^(?:(([\ \t\f\n])+))/,/^(?:(#[^\n]*))/,/^(?:((as|case|of|if|than|else|import|let|in|where|break|continue|export|return|switch|while|default\b)\b|(=|->|<-|:|,|\\|@|;)|(\(|\)|\[|\]|\{|\})|(\.|<&|&>|<<<|>>>|\*|\/|%|\*\*|\+|->|<|>=|<=|==|!=|\|\||&&|\$)))/,/^(?:(((([0-9])+|((([0-9])*(\.([0-9])+))|(([0-9])+\.)))([e|E][\+|\-]([0-9])+))|((([0-9])*(\.([0-9])+))|(([0-9])+\.))))/,/^(?:(0[b|B](([0|1])+)))/,/^(?:((([1-9]([0-9])*))|(0[x|X](([0-9])|[a-fA-F])+)|(0[o|O]?([0-7])+)))/,/^(?:(true|false\b))/,/^(?:(null\b))/,/^(?:(undefined\b))/,/^(?:(("(([^\\\n\"])|(\\.))*")|('(([^\\\n\'])|(\\.))*')))/,/^(?:(\/([^\\\n\/]|(\\.))\/))/,/^(?:(`([^\\\n\`]|(\\.))*`))/,/^(?:((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|([0-9])|_)*))/],
	conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],"inclusive":true},"INCOMMENT":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],"inclusive":true}}
	});
	return lexer;
	})();
	parser.lexer = lexer;
	return parser;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 4 */
/***/ function(module, exports) {

	
	var AST = {};

	/** Binding **/
	AST.Binding = function(name, expr){
	    if( !(this instanceof arguments.callee) )
	        return new arguments.callee(name, expr);
	    this.name = name;
	    this.expr = expr;
	};

	/** Module **/
	var Module = function(imports, exports, bindings){
	    if( !(this instanceof arguments.callee) )
	        return new arguments.callee(imports, exports, bindings);
	    this.imports = imports;
	    this.exports = exports;
	    this.bindings = bindings;
	};

	Module.ImportAs = function(path, name){
	    if( !(this instanceof arguments.callee) )
	        return new arguments.callee(path, name);
	    this.path = path;
	    this.name = name;
	};

	Module.Import = function(path, names){
	    if( !(this instanceof arguments.callee) )
	        return new arguments.callee(path, names);
	    this.path = path;
	    this.names = names;
	};


	Module.Export = function(names){
	    if( !(this instanceof arguments.callee) )
	        return new arguments.callee(names);
	    this.names = names;
	};
	Module.Binding = function(binding){
	    if( !(this instanceof arguments.callee) )
	        return new arguments.callee(binding);
	    this.binding = binding;
	};

	AST.Module = Module;

	/** Expression **/

	var Expr = {};
	Expr.App = function(left, right){
	    if( !(this instanceof arguments.callee) )
	        return new arguments.callee(left, right);
	    this.left = left;
	    this.right = right;
	};

	Expr.Lam = function(arg, expr){
	    if( !(this instanceof arguments.callee) )
	        return new arguments.callee(arg, expr);
	    this.arg = arg;
	    this.expr = expr;
	};

	Expr.IfElse = function(con, suc, alt){
	    if( !(this instanceof arguments.callee) )
	        return new arguments.callee(con, suc, alt);
	    this.con = con;
	    this.suc = suc;
	    this.alt = alt;
	};

	Expr.LetIn = function(bindings, expr){
	    if( !(this instanceof arguments.callee) )
	        return new arguments.callee(bindings, expr);
	    this.bindings = bindings;
	    this.expr = expr;
	};

	Expr.CaseOf = function(con, cases){
	    if( !(this instanceof arguments.callee) )
	        return new arguments.callee(con, cases);
	    this.con = con;
	    this.cases = cases;
	};

	Expr.CaseOf.Case = function(val, expr){
	    if( !(this instanceof arguments.callee) )
	        return new arguments.callee(val, expr);
	    this.val = val;
	    this.expr = expr;
	};

	Expr.Op = function(op, left, right){
	    if( !(this instanceof arguments.callee) )
	        return new arguments.callee(op, left, right);
	    this.op = op;
	    this.left = left;
	    this.right = right;
	};

	Expr.ID = function(name){
	    if( !(this instanceof arguments.callee) )
	        return new arguments.callee(name);
	    this.name = name;
	};

	Expr.Call = function(expr, args){
	    if( !(this instanceof arguments.callee) )
	        return new arguments.callee(expr, args);
	    this.expr = expr;
	    this.args = args;
	};

	Expr.Attr = function(expr, attr){
	    if( !(this instanceof arguments.callee) )
	        return new arguments.callee(expr, attr);
	    this.expr = expr;
	    this.attr = attr;
	};

	Expr.Val = function (type, val){
	    if( !(this instanceof arguments.callee) )
	        return new arguments.callee(type, val);
	    this.type = type;
	    this.val = val;
	};

	Expr.Array = function (content){
	    if( !(this instanceof arguments.callee) )
	        return new arguments.callee(content);
	    this.content = content;
	};

	Expr.Object = function (content){
	    if( !(this instanceof arguments.callee) )
	        return new arguments.callee(content);
	    this.content = content;
	};

	Expr.Object.KeyValue = function(key, val){
	    if( !(this instanceof arguments.callee) )
	        return new arguments.callee(key, val);
	    this.key = key;
	    this.val = val;
	};

	AST.Expr = Expr;
	module.exports = AST;


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	
	module.exports = function (node){
	    var compile = arguments.callee;
	    var AST = __webpack_require__(4);

	    var smID = function(name){
	        switch (name){
	        case '_': return 'null';
	        default:  return '$SM$'+name;
	        };
	    };

	    var smArg = function(name){
	        switch (name){
	        case '_': return '$SM$IGNORE$';
	        default:  return '$SM$'+name;
	        };
	    };

	    if (node instanceof AST.Binding) {
	        return [smID(node.name), '=',compile(node.expr)].join(' ');
	    }
	    else if (node instanceof AST.Module) {
	        return [
	            node.imports.map(function(n){return compile(n);}).join(';'),
	            node.bindings.map(function(n){return compile(n);}).join(';'),
	            node.exports.map(function(n){return compile(n);}).join(';')
	        ].join(';');
	    }
	    else if (node instanceof AST.Module.ImportAs) {
	        return ['var', smID(node.name), '=', 'require(' + node.path + ')'].join(' ');
	    }
	    else if (node instanceof AST.Module.Import) {
	        return node.names.map(function(name){
	            return ['var', smID(name), '=', 'require('+ node.path + ').'+ name].join(' ');
	        }).join(';');
	    }
	    else if (node instanceof AST.Module.Export) {
	        return node.names.map(function(name){
	            return ['exports.'+name, '=', smID(name)].join(' ');
	        }).join(';');
	    }
	    else if (node instanceof AST.Module.Binding) {
	        return 'var ' + compile(node.binding);
	    }
	    else if (node instanceof AST.Expr.App) {
	        return compile(node.left) + '(' + compile(node.right) + ')';
	    }
	    else if (node instanceof AST.Expr.Lam) {
	        return '(function('+ smArg(node.arg) +'){return '+ compile(node.expr) + ';})';
	    }
	    else if (node instanceof AST.Expr.IfElse) {
	        return '('+ compile(node.con) +'?'+ compile(node.suc) +':'+ compile(node.alt) +')';
	    }
	    else if (node instanceof AST.Expr.LetIn) {
	        return '(function(){ '+ node.bindings.map(compile).join(';') +';return ' + compile(node.expr) + ';})()';
	    }
	    else if (node instanceof AST.Expr.CaseOf) {
	        return '(function(){switch('+compile(node.con)+'){'+node.cases.map(compile).join(';')+'}})';
	    }
	    else if (node instanceof AST.Expr.CaseOf.Case) {
	        return 'case ' + compile(node.val) + ':{ return ' + compile(node.expr) + '}';
	    }
	    else if (node instanceof AST.Expr.Op) {
	        switch (node.op){
	        case '**' : return 'Math.power(' + compile(node.left) + ',' + compile(node.right) + ')';
	        case '!=' : return compile(node.left) + '!==' + '(' + compile(node.right) + ')';
	        case '==' : return compile(node.left) + '===' + '(' + compile(node.right) + ')';
	        case '>>>' : return '(function(f){return function(g){return function(x){return f(g(x))}}})(' + compile(node.left) + ')(' + compile(node.right)+ ')';

	        case '<<<' : return '(function(g){return function(f){return function(x){return f(g(x))}}})(' + compile(node.left) + ')(' + compile(node.right)+ ')';

	        default: return compile(node.left) + node.op + '(' + compile(node.right) + ')';
	        };
	    }
	    else if (node instanceof AST.Expr.ID) {
	        return smID(node.name);
	    }
	    else if (node instanceof AST.Expr.Attr) {
	        return compile(node.expr) + '.' + node.attr;
	    }
	    else if (node instanceof AST.Expr.Call) {
	        return compile(node.expr) + '(' + node.args.content.map(compile).join(',') + ')';
	    }
	    else if (node instanceof AST.Expr.Val) {
	        return '('+ node.val +')';
	    }
	    else if (node instanceof AST.Expr.Array) {
	        return '[' + node.content.map(compile).join(',') + ']';
	    }
	    else if (node instanceof AST.Expr.Object) {
	        return '{' + node.content.map(compile).join(',') + '}';
	    }
	    else if (node instanceof AST.Expr.Object.KeyValue) {
	        return node.name + ':' + compile(node.val);
	    }

	    throw Error("Unexpected Node");
	};


/***/ }
/******/ ]);